#!/bin/bash

# Configure mtools
export MTOOLS_SKIP_CHECK=1
export MTOOLSRC=./.mtoolsrc

# Create the bin directory if not created
if [ ! -d bin ]; then
    mkdir bin
fi

# # Check limine build, install if needed
if [ ! -f limine_c/bin/limine-deploy ]; then
    echo "Note: limine isn't build. Building limine..."
    pushd limine_c
    ./bootstrap
    ./configure --enable-all CROSS_TOOLCHAIN=llvm
    make
    popd
fi

echo ":: Building the objects"
nasm -f elf64 kernel/cpu/cpu.asm -o bin/cpu.o
echo ":: Building the Kernel"
odin build boot -out:bin/kernel.o -target:freestanding_amd64_sysv -build-mode:obj -collection:kernel=kernel
echo ":: Linking objects"
ld -o bin/kernel.elf bin/kernel.o bin/cpu.o -T kernel/linker

make -C limine

mkdir -p iso_root
 
# Copy the relevant files over.
cp -v bin/myos limine.cfg limine/limine-bios.sys \
      limine/limine-bios-cd.bin limine/limine-uefi-cd.bin iso_root/
 
# Create the EFI boot tree and copy Limine's EFI executables over.
mkdir -p iso_root/EFI/BOOT
cp -v limine/BOOTX64.EFI iso_root/EFI/BOOT/
cp -v limine/BOOTIA32.EFI iso_root/EFI/BOOT/
 
# Create the bootable ISO.
xorriso -as mkisofs -b limine-bios-cd.bin \
        -no-emul-boot -boot-load-size 4 -boot-info-table \
        --efi-boot limine-uefi-cd.bin \
        -efi-boot-part --efi-boot-image --protective-msdos-label \
        iso_root -o iso_root/image.iso
 
# Install Limine stage 1 and 2 for legacy BIOS boot.
./limine/limine bios-install iso_root/image.iso
echo ":: Build success"
